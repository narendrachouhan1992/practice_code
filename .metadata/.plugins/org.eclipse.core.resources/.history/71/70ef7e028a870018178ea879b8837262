package GraphAlgos;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

public class Graph {
	private int V;
	private LinkedList<Integer>[] adj;
	public Graph(int numberOfVertex) {
		this.V = numberOfVertex;
		adj = new LinkedList[numberOfVertex];
		for(int i =0;i<numberOfVertex;i++)
		{
			adj[i] = new LinkedList<Integer>();
		}
	}
	void addEdge(int v,int w)
    {
        adj[v].add(w);
    }
	void printDFS(int source)
	{
		boolean[] visited = new boolean[V];
		Stack<Integer> st = new Stack<Integer>();
		st.push(source);
		while(!st.isEmpty())
		{
			int s = st.pop();
			if(!visited[s])
			{
				System.out.print(s+" ");
				visited[s] = true;
				for (Integer i : adj[s]) {
					if(!visited[i])
					{
						st.push(i);
					}
				}
			}
		}
	}
	void printBFS(int source)
	{
		boolean[] visited = new boolean[V];
		Queue<Integer> q = new LinkedList<Integer>();
	    q.add(source);
        while(!q.isEmpty())
        {
        	int s = q.poll();
        	if(!visited[s])
        	{
        		System.out.print(s+ " ");
        		visited[s] = true;
        		for (Integer n : adj[s]) {
        			if (!visited[n])
                    {
                        q.add(n);
                    }
				}
        	}
        }
	}
	private void dfsUntil(int s, List<Boolean> visited)
	{
		visited.set(s, true);
		for (Integer i : adj[s]) {
			if(!visited.get(i))
				dfsUntil(i, visited);
		}
	}
	int findMothervertex()
	{
		List<Boolean> visited = new ArrayList<Boolean>();
		for(int i=0;i<V;i++)
		{
			visited.add(i, false);
		}
		int lastVisited = 0;
		for(int i=0;i<V;i++)
		{
			if(!visited.get(i))
			{
				dfsUntil(i, visited);
				lastVisited = i;
			}
		}
		
		// check if lastVisited is ctually a mother vertex or not. that can be find oout by reseting all values of adjusency 
		//matrix and again checking dfs from lastVisited. if it reached to all nodes, then it is a mother vertex
		for(int i=0;i<V;i++)
		{
			visited.set(i, false);
		}
		dfsUntil(lastVisited, visited);
		for(int i=0;i<V;i++)
		{
			if(!visited.get(i))
			{
				
				return -1;
			}	
		}
		return lastVisited;
	}
	private boolean detectCycleUntil(int s, boolean[] visited, boolean[] curRec)
	{
		
	}
	public boolean cycleDetection()
	{
		boolean[] visited = new boolean[V];
		boolean[] curRec = new boolean[V];
		for(int i=0;i<V;i++)
		{
			
		}
	}
	public static void main(String[] args) {
		Graph g = new Graph(7); 
		 g.addEdge(0, 1);
	    g.addEdge(0, 2);
	    g.addEdge(1, 3);
	    g.addEdge(4, 1);
	    g.addEdge(6, 4);
	    g.addEdge(5, 6);
	    g.addEdge(5, 2);
	    g.addEdge(6, 0);
        System.out.println("BFS from 2 is below");
        g.printBFS(2);
        System.out.println("DFS from 2 is below");
        g.printDFS(2);
        
        System.out.println("finding mother vertex");
        int m = g.findMothervertex();
        if(m == -1)
        	System.out.println("no mother vertex exist");
        else
        	System.out.println("mother vertex is "+ m);
	}
}
